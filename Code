#include "ThingSpeak.h"
#include <ESP8266WiFi.h>
//----------- Enter you Wi-Fi Details---------//
char ssid[] = "Baivab"; //SSID
char pass[] = "bkbkbk15042001"; // Password
//-------------------------------------------//
// --------------- Tank details --------------//
const int total_height = 25; // Tank height in CM
const int hold_height = 20;// Water hold height in CM
//-------------------------------------------//
//----- minutes -----//
int minute = 1/4; // Data update in 15 sec.
//------------------//
//----------- Channel Details -------------//
unsigned long Channel_ID = 1806349; // Channel ID
const int Field_number = 1; // To which field to write data (don't change)
const char * WriteAPIKey = "VIZXIF5B5OEWZTVG"; // Your write API Key
// ----------------------------------------//
//defines pins numbers
const int trigPin = 5; //D1
const int echoPin = 4; //D2
const int buzzPin = 14; //D5
const int red = 12; //D6
const int green = 2; //D4
// defines variables
long duration;
int distance;
int sensr_to_wtr = 0;
int i;
WiFiClient client;
int x;
int m;
int resultCM;
int tnk_lvl = 0;
void setup()
{
pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin, INPUT); // Sets the echoPin as an Input
pinMode(buzzPin, OUTPUT); // buzz pin is output to control buzzering
pinMode(red, OUTPUT); //initializing red LED
pinMode(green, OUTPUT); //initializing green LED
Serial.begin(115200); // Starts the serial communication
WiFi.mode(WIFI_STA);
ThingSpeak.begin(client);
sensr_to_wtr = total_height - hold_height;
}
void loop()
{
internet();
for (i = 0; i < minute; i++)
{
Serial.println("System Standby....");
Serial.print(i);
Serial.println(" Minutes elapsed.");
delay(20000);
delay(20000);
delay(20000);
}
measure();
m=distance*4;
Serial.print("Tank Level:");
Serial.print(m);
Serial.println("%");
upload();
}
void upload()
{
internet();
x = ThingSpeak.writeField(Channel_ID, Field_number, distance, WriteAPIKey);
if (x == 200)Serial.println("Data Updated.");
if (x != 200)
{
Serial.println("....");
delay(15000);
upload();
}
}
void measure()
{
// Clears the trigPin
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
// Reads the echoPin, returns the 0sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
// Calculating the distance
distance= duration*0.034/2;
// Prints the distance on the Serial Monitor
Serial.print("Distance: ");
Serial.println(distance);//divide for output in 100digit
//delay(1000);
tnk_lvl = map(resultCM, sensr_to_wtr, total_height, 100, 0);
if (tnk_lvl > 100) tnk_lvl = 100;
if (tnk_lvl < 0) tnk_lvl = 0;
if(distance<=5)
{
Serial.print("Dam is full");
digitalWrite(buzzPin, HIGH);
digitalWrite(red, HIGH);
digitalWrite(green, LOW);
}
else if(distance>15)
{
Serial.print("Dam empty or the depth is not close to the limit of dam.");
digitalWrite(buzzPin, LOW);
digitalWrite(green, HIGH);
digitalWrite(red, LOW);
}
else
{
Serial.print("Keep an eye on the system.");
digitalWrite(buzzPin, LOW);
digitalWrite(red, HIGH);
digitalWrite(green, LOW);
}
}
void internet()
{
if (WiFi.status() != WL_CONNECTED)
{
Serial.print("Attempting to connect to SSID: ");
Serial.println(ssid);
while (WiFi.status() != WL_CONNECTED)
{
WiFi.begin(ssid, pass);
Serial.print(".");
delay(5000);
}
Serial.println("\nConnected.");
}
}
